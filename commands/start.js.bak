const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits, ChannelType } = require('discord.js');
const { getUserLogChannel, storeUserChannel, getUserChannelId } = require('../utils/channelManager');
const config = require('../config/config');
const { getAvailableCommands, formatCommandList } = require('../utils/commandHelper');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('start')
    .setDescription('Creates your personal log channel and explains available commands'),
  
  async execute(interaction) {
    try {
      // Defer reply to prevent timeout
      await interaction.deferReply({ ephemeral: true });
      
      const guild = interaction.guild;
      const user = interaction.user;
      const member = interaction.member;
      
      // Check bot permissions first
      const botMember = guild.members.me;
      if (!botMember.permissions.has(PermissionFlagsBits.ManageChannels)) {
        await interaction.editReply({
          content: "‚ùå The bot doesn't have permission to manage channels. Please ask a server administrator to grant the 'Manage Channels' permission.",
          ephemeral: true
        });
        return;
      }

      // Check if user already has a channel
      const existingChannelId = await getUserChannelId(user.id, guild.id);
      if (existingChannelId) {
        const existingChannel = guild.channels.cache.get(existingChannelId);
        if (existingChannel) {
          await interaction.editReply({
            content: `‚úÖ Your personal log channel is already set up: <#${existingChannel.id}>`,
            ephemeral: true
          });
          return;
        }
      }

      // Check if user has the Intern role
      const isIntern = member.roles.cache.has(config.roles.intern);
      
      // Select the appropriate category based on user role
      const categoryId = isIntern ? config.categories.intern : config.categories.workLog;
      
      // Get or create user's channel
      const userChannel = await getUserLogChannel(guild, user, categoryId);
      
      if (!userChannel) {
        await interaction.editReply({
          content: "‚ùå Failed to create your personal log channel. Please try again later or contact a server administrator.",
          ephemeral: true
        });
        return;
      }

      // Create welcome embed
      const welcomeEmbed = new EmbedBuilder()
        .setColor('#3498db')
        .setTitle('üöÄ WELCOME TO FERRET9')
        .setDescription(`Welcome ${user}! This is your personal activity tracking channel.`)
        .addFields(
          { 
            name: 'üìã About This Channel', 
            value: 'This channel tracks your work activities, providing a complete history of your sessions.' 
          },
          { 
            name: '‚öôÔ∏è Available Commands', 
            value: [
              '‚Ä¢ `/signin` - Start your work session',
              '‚Ä¢ `/signout` - End your work session (requires summary)',
              '‚Ä¢ `/break` - Take a break (requires reason)',
              '‚Ä¢ `/back` - Return from a break',
              '‚Ä¢ `/update` - Share a progress update'
            ].join('\n')
          }
        )
        .setAuthor({ 
          name: interaction.member.nickname || user.tag,
          iconURL: user.displayAvatarURL() 
        })
        .setFooter({ 
          text: isIntern ? 'Ferret9 Bot - Intern' : 'Ferret9 Bot', 
          iconURL: interaction.client.user.displayAvatarURL() 
        });

      // Send welcome message to the channel
      await userChannel.send({
        content: `Welcome to your personal log channel, ${user}! This is where all your work activity will be logged.`,
        embeds: [welcomeEmbed]
      });
      
      // Get available commands for inactive users
      const commandInfo = getAvailableCommands('Inactive');
      const commandList = formatCommandList(commandInfo.commands);
      
      // Create command guide embed
      const commandGuideEmbed = new EmbedBuilder()
        .setColor('#3498DB')
        .setTitle('üöÄ Getting Started')
        .setDescription('Here are the commands you can use:')
        .addFields(
          { 
            name: 'üìã Available Commands', 
            value: commandList
          },
          {
            name: 'üìù Next Steps',
            value: 'Use `/signin` to start your work session and begin tracking your time.'
          }
        )
        .setFooter({ 
          text: 'Ferret9 Bot', 
          iconURL: interaction.client.user.displayAvatarURL() 
        });
      
      // Send command guide to the channel
      await userChannel.send({ embeds: [commandGuideEmbed] });
      
      // Send confirmation to user
      await interaction.editReply({
        content: `‚úÖ Your personal log channel has been created: ${userChannel}. Check the channel for available commands.`,
        ephemeral: true
      });

    } catch (error) {
      console.error('Error in start command:', error);
      await interaction.editReply({
        content: `An error occurred: ${error.message}`,
        ephemeral: true
      });
    }
  },
}; 